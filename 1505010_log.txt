At line no: 1 type_specifier : INT

int

New ScopeTable with id 2 created
At line no: 2 type_specifier : INT

int

At line no: 2 declaration_list : ID

a

At line no: 2 declaration_list : declaration_list COMMA ID 

a,b

At line no: 2 declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD 

a,b,c[3]

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[3];


At line no: 2 statement : var_declaration

int a,b,c[3];


At line no: 2 statements : statement

int a,b,c[3];


At line no: 3 variable : ID 

a2

At line no: 3 factor : CONST_INT 

1

At line no: 3 unary_expression : factor 

1

At line no: 3 term : unary_expression

1

At line no: 3 factor : CONST_INT 

2

At line no: 3 unary_expression : factor 

2

At line no: 3 term : unary_expression

2

At line no: 3 simple_expression : term

2

At line no: 3 factor : CONST_INT 

3

At line no: 3 unary_expression : factor 

3

At line no: 3 term : unary_expression

3

At line no: 3 simple_expression : simple_expression ADDOP term 

2+3

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax


At line no: 3 rel_expression : simple_expression 

t0

At line no: 3 logic_expression : rel_expression 

t0

At line no: 3 expression : logic_expression 

t0

At line no: 3 factor : LPAREN expression RPAREN 

(t0)

At line no: 3 unary_expression : factor 

t0

At line no: 3 term : term MULOP unary_expression

1*t0

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax


At line no: 3 factor : CONST_INT 

3

At line no: 3 unary_expression : factor 

3

At line no: 3 term : term MULOP unary_expression

t1%3

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx


At line no: 3 simple_expression : term

t2

At line no: 3 rel_expression : simple_expression 

t2

At line no: 3 logic_expression : rel_expression 

t2

At line no: 3 expression : variable ASSIGNOP logic_expression 

a2=t2

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax


At line no: 3 expression_statement : expression SEMICOLON

a2=t2;

At line no: 3 statement : expression_statement 

a2=t2

At line no: 3 statements : statements statement

int a,b,c[3];
a2=t2

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax


At line no: 4 variable : ID 

b2

At line no: 4 factor : CONST_INT 

1

At line no: 4 unary_expression : factor 

1

At line no: 4 term : unary_expression

1

At line no: 4 simple_expression : term

1

At line no: 4 factor : CONST_INT 

5

At line no: 4 unary_expression : factor 

5

At line no: 4 term : unary_expression

5

At line no: 4 simple_expression : term

5

At line no: 4 rel_expression : simple_expression RELOP simple_expression 

1<5

	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:


At line no: 4 logic_expression : rel_expression 

t3

At line no: 4 expression : variable ASSIGNOP logic_expression 

b2=t3

	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax


At line no: 4 expression_statement : expression SEMICOLON

b2=t3;

At line no: 4 statement : expression_statement 

b2=t3

At line no: 4 statements : statements statement

int a,b,c[3];
a2=t2b2=t3

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax


At line no: 5 factor : CONST_INT 

0

At line no: 5 unary_expression : factor 

0

At line no: 5 term : unary_expression

0

At line no: 5 simple_expression : term

0

At line no: 5 rel_expression : simple_expression 

0

At line no: 5 logic_expression : rel_expression 

0

At line no: 5 expression : logic_expression 

0

At line no: 5 variable : ID LTHIRD expression RTHIRD 

c[0]

	mov bx, 0
	add bx, bx


At line no: 5 factor : CONST_INT 

2

At line no: 5 unary_expression : factor 

2

At line no: 5 term : unary_expression

2

At line no: 5 simple_expression : term

2

At line no: 5 rel_expression : simple_expression 

2

At line no: 5 logic_expression : rel_expression 

2

At line no: 5 expression : variable ASSIGNOP logic_expression 

c[0]=2

	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax


At line no: 5 expression_statement : expression SEMICOLON

c[0]=2;

At line no: 5 statement : expression_statement 

c[0]=2

At line no: 5 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax


At line no: 6 variable : ID 

a2

At line no: 6 factor : variable

a2

	mov ax, a2
	mov t4, ax


At line no: 6 unary_expression : factor 

t4

At line no: 6 term : unary_expression

t4

At line no: 6 simple_expression : term

t4

At line no: 6 rel_expression : simple_expression 

t4

At line no: 6 variable : ID 

b2

At line no: 6 factor : variable

b2

	mov ax, b2
	mov t5, ax


At line no: 6 unary_expression : factor 

t5

At line no: 6 term : unary_expression

t5

At line no: 6 simple_expression : term

t5

At line no: 6 rel_expression : simple_expression 

t5

At line no: 6 logic_expression : rel_expression LOGICOP rel_expression 

t4&&t5

	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 


At line no: 6 expression : logic_expression 

t6

At line no: 7 factor : CONST_INT 

0

At line no: 7 unary_expression : factor 

0

At line no: 7 term : unary_expression

0

At line no: 7 simple_expression : term

0

At line no: 7 rel_expression : simple_expression 

0

At line no: 7 logic_expression : rel_expression 

0

At line no: 7 expression : logic_expression 

0

At line no: 7 variable : ID LTHIRD expression RTHIRD 

c[0]

	mov bx, 0
	add bx, bx


At line no: 7 factor : variable INCOP 

c[0]

At line no: 7 unary_expression : factor 

t7

At line no: 7 term : unary_expression

t7

At line no: 7 simple_expression : term

t7

At line no: 7 rel_expression : simple_expression 

t7

At line no: 7 logic_expression : rel_expression 

t7

At line no: 7 expression : logic_expression 

t7

At line no: 7 expression_statement : expression SEMICOLON

t7;

At line no: 7 statement : expression_statement 

t7

At line no: 9 factor : CONST_INT 

1

At line no: 9 unary_expression : factor 

1

At line no: 9 term : unary_expression

1

At line no: 9 simple_expression : term

1

At line no: 9 rel_expression : simple_expression 

1

At line no: 9 logic_expression : rel_expression 

1

At line no: 9 expression : logic_expression 

1

At line no: 9 variable : ID LTHIRD expression RTHIRD 

c[1]

	mov bx, 1
	add bx, bx


At line no: 9 factor : CONST_INT 

0

At line no: 9 unary_expression : factor 

0

At line no: 9 term : unary_expression

0

At line no: 9 simple_expression : term

0

At line no: 9 rel_expression : simple_expression 

0

At line no: 9 logic_expression : rel_expression 

0

At line no: 9 expression : logic_expression 

0

At line no: 9 variable : ID LTHIRD expression RTHIRD 

c[0]

	mov bx, 0
	add bx, bx


At line no: 9 factor : variable

c[0]

	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax


At line no: 9 unary_expression : factor 

t8

At line no: 9 term : unary_expression

t8

At line no: 9 simple_expression : term

t8

At line no: 9 rel_expression : simple_expression 

t8

At line no: 9 logic_expression : rel_expression 

t8

At line no: 9 expression : variable ASSIGNOP logic_expression 

c[1]=t8

	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax


At line no: 9 expression_statement : expression SEMICOLON

c[1]=t8;

At line no: 9 statement : expression_statement 

c[1]=t8

At line no: 9 statement : IF LPAREN expression RPAREN statement ELSE statement  

if(t6)t7elsec[1]=t8

	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF


At line no: 9 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF


At line no: 10 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);


At line no: 10 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);


	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L6: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H


At line no: 11 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);


At line no: 11 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);


	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L6: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L7: 		;PRINT
	mov ax, b2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H


At line no: 12 variable : ID 

a2

At line no: 12 factor : CONST_INT 

0

At line no: 12 unary_expression : factor 

0

At line no: 12 term : unary_expression

0

At line no: 12 simple_expression : term

0

At line no: 12 rel_expression : simple_expression 

0

At line no: 12 logic_expression : rel_expression 

0

At line no: 12 expression : logic_expression 

0

At line no: 12 variable : ID LTHIRD expression RTHIRD 

c[0]

	mov bx, 0
	add bx, bx


At line no: 12 factor : variable

c[0]

	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t9, ax


At line no: 12 unary_expression : factor 

t9

At line no: 12 term : unary_expression

t9

At line no: 12 simple_expression : term

t9

At line no: 12 rel_expression : simple_expression 

t9

At line no: 12 logic_expression : rel_expression 

t9

At line no: 12 expression : variable ASSIGNOP logic_expression 

a2=t9

	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t9, ax
	mov ax, t9
	mov a2, ax


At line no: 12 expression_statement : expression SEMICOLON

a2=t9;

At line no: 12 statement : expression_statement 

a2=t9

At line no: 12 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L6: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L7: 		;PRINT
	mov ax, b2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t9, ax
	mov ax, t9
	mov a2, ax


At line no: 13 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);


At line no: 13 statements : statements statement

int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9println(a);


	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L6: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L7: 		;PRINT
	mov ax, b2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t9, ax
	mov ax, t9
	mov a2, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L8: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H


At line no: 14 compound_statement : LCURL statements RCURL 

{
int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9println(a);
}

ScopeTable# 2 
1 -->  <c , ID> 
10 -->  <b , ID> 
19 -->  <a , ID> 



ScopeTable# 1 
3 -->  <main , ID> 


ScopeTable with id 2 removed
At line no: 14 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9println(a);
}

	mov ax, 2
	mov bx, 3
	add ax, bx
	mov t0, ax
	mov ax, 1
	mov bx, t0
	mul bx
	mov t1, ax
	mov ax, t1
	mov bx, 3
	xor dx, dx
	idiv bx
	mov t2, dx
	mov ax, t2
	mov a2, ax
	mov ax, 1
	cmp ax, 5
	jl L0
	mov t3, 0
	jmp L1
L0:
	mov t3, 1
L1:
	mov ax, t3
	mov b2, ax
	mov bx, 0
	add bx, bx
	mov ax, 2
	mov c2[bx], ax
	mov ax, a2
	mov t4, ax
	mov ax, b2
	mov t5, ax
	mov ax, t4
	mov bx, t5
	cmp ax, 0
	je L2
	cmp bx, 0
	je L2
	mov t6, 1
	jmp L3
L2: 
	mov t6, 0
L3: 
	mov ax, t6
	cmp ax, 0
	je L4	;ELSE
	mov bx, 0
	add bx, bx
	jmp L5	;ENDIF
L4:		;ELSE
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t8, ax
	mov bx, 1
	add bx, bx
	mov ax, t8
	mov c2[bx], ax
L5:		;ENDIF
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L6: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L7: 		;PRINT
	mov ax, b2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	mov bx, 0
	add bx, bx
	mov ax, c2[bx]
	mov t9, ax
	mov ax, t9
	mov a2, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L8: 		;PRINT
	mov ax, a2

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H


At line no: 14 unit : func_definition

int main(){
int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9println(a);
}

At line no: 14 program : unit

int main(){
int a,b,c[3];
a2=t2b2=t3c[0]=2if(t6)t7elsec[1]=t8println(a);
println(b);
a2=t9println(a);
}

	Symbol Table: 

ScopeTable# 1 
3 -->  <main , ID> 


Total Lines: 15

Total Errors: 3

