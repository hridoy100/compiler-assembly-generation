At line no: 1 type_specifier : INT

int

At line no: 1 type_specifier : INT

int

At line no: 1 parameter_list : type_specifier ID 

int a

New ScopeTable with id 2 created
At line no: 2 factor : CONST_INT 

2

At line no: 2 unary_expression : factor 

2

At line no: 2 term : unary_expression

2

At line no: 2 variable : ID 

a2

At line no: 2 factor : variable

a2

	mov ax, a2
	mov t0, ax


At line no: 2 unary_expression : factor 

t0

At line no: 2 term : term MULOP unary_expression

2*t0

	mov ax, a2
	mov t0, ax
	mov ax, 2
	mov bx, t0
	mul bx
	mov t1, ax


At line no: 2 simple_expression : term

t1

At line no: 2 rel_expression : simple_expression 

t1

At line no: 2 logic_expression : rel_expression 

t1

At line no: 2 expression : logic_expression 

t1

At line no: 2 statement : RETURN expression SEMICOLON 

return t1;


At line no: 2 statements : statement

return t1;


At line no: 3 variable : ID 

a2

At line no: 3 factor : CONST_INT 

9

At line no: 3 unary_expression : factor 

9

At line no: 3 term : unary_expression

9

At line no: 3 simple_expression : term

9

At line no: 3 rel_expression : simple_expression 

9

At line no: 3 logic_expression : rel_expression 

9

At line no: 3 expression : variable ASSIGNOP logic_expression 

a2=9

	mov ax, 9
	mov a2, ax


At line no: 3 expression_statement : expression SEMICOLON

a2=9;

At line no: 3 statement : expression_statement 

a2=9

At line no: 3 statements : statements statement

return t1;
a2=9

	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push t1		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.
	mov ax, 9
	mov a2, ax


At line no: 4 compound_statement : LCURL statements RCURL 

{
return t1;
a2=9}

ScopeTable# 2 
19 -->  <a , ID> 



ScopeTable# 1 
14 -->  <f , ID> 


ScopeTable with id 2 removed
At line no: 4 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a){
return t1;
a2=9}

	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push t1		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.
	mov ax, 9
	mov a2, ax

	ret


At line no: 4 unit : func_definition

int f(int a){
return t1;
a2=9}

At line no: 4 program : unit

int f(int a){
return t1;
a2=9}

At line no: 6 type_specifier : INT

int

At line no: 6 type_specifier : INT

int

At line no: 6 parameter_list : type_specifier ID 

int a

At line no: 6 type_specifier : INT

int

At line no: 6 parameter_list : parameter_list COMMA type_specifier ID 

int a,int b

New ScopeTable with id 3 created
At line no: 7 type_specifier : INT

int

At line no: 7 declaration_list : ID

x

At line no: 7 var_declaration : type_specifier declaration_list SEMICOLON

int x;


At line no: 7 statement : var_declaration

int x;


At line no: 7 statements : statement

int x;


At line no: 8 variable : ID 

x3

At line no: 8 variable : ID 

a3

At line no: 8 factor : variable

a3

	mov ax, a3
	mov t2, ax


At line no: 8 unary_expression : factor 

t2

At line no: 8 term : unary_expression

t2

At line no: 8 simple_expression : term

t2

At line no: 8 rel_expression : simple_expression 

t2

At line no: 8 logic_expression : rel_expression 

t2

At line no: 8 arguments : logic_expression

t2

At line no: 8 argument_list : arguments

t2

At line no: 8 factor : ID LPAREN argument_list RPAREN

f(t2)


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax


At line no: 8 unary_expression : factor 

t3

At line no: 8 term : unary_expression

t3

At line no: 8 simple_expression : term

t3

At line no: 8 variable : ID 

a3

At line no: 8 factor : variable

a3

	mov ax, a3
	mov t4, ax


At line no: 8 unary_expression : factor 

t4

At line no: 8 term : unary_expression

t4

At line no: 8 simple_expression : simple_expression ADDOP term 

t3+t4


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax


At line no: 8 variable : ID 

b3

At line no: 8 factor : variable

b3

	mov ax, b3
	mov t6, ax


At line no: 8 unary_expression : factor 

t6

At line no: 8 term : unary_expression

t6

At line no: 8 simple_expression : simple_expression ADDOP term 

t5+t6


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax


At line no: 8 rel_expression : simple_expression 

t7

At line no: 8 logic_expression : rel_expression 

t7

At line no: 8 expression : variable ASSIGNOP logic_expression 

x3=t7


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax
	mov ax, t7
	mov x3, ax


At line no: 8 expression_statement : expression SEMICOLON

x3=t7;

At line no: 8 statement : expression_statement 

x3=t7

At line no: 8 statements : statements statement

int x;
x3=t7


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax
	mov ax, t7
	mov x3, ax


At line no: 9 variable : ID 

x3

At line no: 9 factor : variable

x3

	mov ax, x3
	mov t8, ax


At line no: 9 unary_expression : factor 

t8

At line no: 9 term : unary_expression

t8

At line no: 9 simple_expression : term

t8

At line no: 9 rel_expression : simple_expression 

t8

At line no: 9 logic_expression : rel_expression 

t8

At line no: 9 expression : logic_expression 

t8

At line no: 9 statement : RETURN expression SEMICOLON 

return t8;


At line no: 9 statements : statements statement

int x;
x3=t7return t8;



	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax
	mov ax, t7
	mov x3, ax
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push t8		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.


At line no: 10 compound_statement : LCURL statements RCURL 

{
int x;
x3=t7return t8;
}

ScopeTable# 3 
10 -->  <b , ID> 
12 -->  <x , ID> 
19 -->  <a , ID> 



ScopeTable# 1 
5 -->  <g , ID> 
14 -->  <f , ID> 


ScopeTable with id 3 removed
At line no: 10 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b){
int x;
x3=t7return t8;
}


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax
	mov ax, t7
	mov x3, ax
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push t8		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.

	ret


At line no: 10 unit : func_definition

int g(int a,int b){
int x;
x3=t7return t8;
}

At line no: 10 program : program unit

int f(int a){
return t1;
a2=9}int g(int a,int b){
int x;
x3=t7return t8;
}


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t2

	call f

	pop ax		;function's return value in ax register
	mov t3, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, a3
	mov t4, ax
	mov ax, t3
	mov bx, t4
	add ax, bx
	mov t5, ax
	mov ax, b3
	mov t6, ax
	mov ax, t5
	mov bx, t6
	add ax, bx
	mov t7, ax
	mov ax, t7
	mov x3, ax
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push t8		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.

	ret


At line no: 12 type_specifier : INT

int

New ScopeTable with id 4 created
At line no: 13 type_specifier : INT

int

At line no: 13 declaration_list : ID

a

At line no: 13 declaration_list : declaration_list COMMA ID 

a,b

At line no: 13 var_declaration : type_specifier declaration_list SEMICOLON

int a,b;


At line no: 13 statement : var_declaration

int a,b;


At line no: 13 statements : statement

int a,b;


At line no: 14 variable : ID 

a4

At line no: 14 factor : CONST_INT 

1

At line no: 14 unary_expression : factor 

1

At line no: 14 term : unary_expression

1

At line no: 14 simple_expression : term

1

At line no: 14 rel_expression : simple_expression 

1

At line no: 14 logic_expression : rel_expression 

1

At line no: 14 expression : variable ASSIGNOP logic_expression 

a4=1

	mov ax, 1
	mov a4, ax


At line no: 14 expression_statement : expression SEMICOLON

a4=1;

At line no: 14 statement : expression_statement 

a4=1

At line no: 14 statements : statements statement

int a,b;
a4=1

	mov ax, 1
	mov a4, ax


At line no: 15 variable : ID 

b4

At line no: 15 factor : CONST_INT 

2

At line no: 15 unary_expression : factor 

2

At line no: 15 term : unary_expression

2

At line no: 15 simple_expression : term

2

At line no: 15 rel_expression : simple_expression 

2

At line no: 15 logic_expression : rel_expression 

2

At line no: 15 expression : variable ASSIGNOP logic_expression 

b4=2

	mov ax, 2
	mov b4, ax


At line no: 15 expression_statement : expression SEMICOLON

b4=2;

At line no: 15 statement : expression_statement 

b4=2

At line no: 15 statements : statements statement

int a,b;
a4=1b4=2

	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax


At line no: 16 variable : ID 

a4

At line no: 16 variable : ID 

a4

At line no: 16 factor : variable

a4

	mov ax, a4
	mov t9, ax


At line no: 16 unary_expression : factor 

t9

At line no: 16 term : unary_expression

t9

At line no: 16 simple_expression : term

t9

At line no: 16 rel_expression : simple_expression 

t9

At line no: 16 logic_expression : rel_expression 

t9

At line no: 16 arguments : logic_expression

t9

At line no: 16 variable : ID 

b4

At line no: 16 factor : variable

b4

	mov ax, b4
	mov t10, ax


At line no: 16 unary_expression : factor 

t10

At line no: 16 term : unary_expression

t10

At line no: 16 simple_expression : term

t10

At line no: 16 rel_expression : simple_expression 

t10

At line no: 16 logic_expression : rel_expression 

t10

At line no: 16 arguments : arguments COMMA logic_expression

t9,t10

At line no: 16 argument_list : arguments

t9,t10

At line no: 16 factor : ID LPAREN argument_list RPAREN

f(t9,t10)


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax


At line no: 16 unary_expression : factor 

t11

At line no: 16 term : unary_expression

t11

At line no: 16 simple_expression : term

t11

At line no: 16 rel_expression : simple_expression 

t11

At line no: 16 logic_expression : rel_expression 

t11

At line no: 16 expression : variable ASSIGNOP logic_expression 

a4=t11


	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax


At line no: 16 expression_statement : expression SEMICOLON

a4=t11;

At line no: 16 statement : expression_statement 

a4=t11

At line no: 16 statements : statements statement

int a,b;
a4=1b4=2a4=t11

	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax

	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax


At line no: 17 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);


At line no: 17 statements : statements statement

int a,b;
a4=1b4=2a4=t11println(a);


	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax

	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L0: 		;PRINT
	mov ax, a4

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H


At line no: 18 factor : CONST_INT 

0

At line no: 18 unary_expression : factor 

0

At line no: 18 term : unary_expression

0

At line no: 18 simple_expression : term

0

At line no: 18 rel_expression : simple_expression 

0

At line no: 18 logic_expression : rel_expression 

0

At line no: 18 expression : logic_expression 

0

At line no: 18 statement : RETURN expression SEMICOLON 

return 0;


At line no: 18 statements : statements statement

int a,b;
a4=1b4=2a4=t11println(a);
return 0;


	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax

	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L0: 		;PRINT
	mov ax, a4

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push 0		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.


At line no: 19 compound_statement : LCURL statements RCURL 

{
int a,b;
a4=1b4=2a4=t11println(a);
return 0;
}

ScopeTable# 4 
10 -->  <b , ID> 
19 -->  <a , ID> 



ScopeTable# 1 
3 -->  <main , ID> 
5 -->  <g , ID> 
14 -->  <f , ID> 


ScopeTable with id 4 removed
At line no: 19 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b;
a4=1b4=2a4=t11println(a);
return 0;
}

	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax

	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L0: 		;PRINT
	mov ax, a4

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push 0		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.


At line no: 19 unit : func_definition

int main(){
int a,b;
a4=1b4=2a4=t11println(a);
return 0;
}

At line no: 19 program : program unit

int f(int a){
return t1;
a2=9}int g(int a,int b){
int x;
x3=t7return t8;
}int main(){
int a,b;
a4=1b4=2a4=t11println(a);
return 0;
}

	mov ax, 1
	mov a4, ax
	mov ax, 2
	mov b4, ax

	;push register data
	push ax
	push bx
	push cx
	push dx

	push t10
	push t9

	call f

	pop ax		;function's return value in ax register
	mov t11, ax
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, t11
	mov a4, ax
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
L0: 		;PRINT
	mov ax, a4

	CALL OUTDEC
	MOV AH,2
	MOV DL,0Dh
	INT 21H
	MOV DL,0Ah
	INT 21H
	pop bx		;RETRIEVE RETURN ADDRESS FROM THE CALL.
	push 0		;VALUE TO RETURN 
	push bx		;PUT RETURN ADDRESS BACK.


	Symbol Table: 

ScopeTable# 1 
3 -->  <main , ID> 
5 -->  <g , ID> 
14 -->  <f , ID> 


Total Lines: 20

Total Errors: 5

